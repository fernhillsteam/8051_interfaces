C51 COMPILER V9.60.0.0   VOLTMETER                                                         07/13/2021 21:01:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE VOLTMETER
OBJECT MODULE PLACED IN .\Objects\voltmeter.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE voltmeter.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\voltmeter.lst) TABS(2) OBJECT(.\Objects\voltmeter.obj)

line level    source

   1          #include<reg51.h>
   2          #define lcd_port P2
   3          
   4          sbit rs=P3^0;
   5          sbit rw=P3^1;
   6          sbit en=P3^2;
   7          sbit flag=P2^7;
   8          
   9          void busy()
  10          {         
  11   1        flag=1;
  12   1        rs=0;
  13   1        rw=1;
  14   1        while(flag!=0)
  15   1        {
  16   2          en=0;
  17   2          en=1;
  18   2        }
  19   1      }
  20          
  21          void lcd_cmd(unsigned char val_lcd)
  22          {
  23   1        busy();
  24   1        lcd_port=val_lcd;
  25   1        rs=0;
  26   1        rw=0;
  27   1        en=1;
  28   1        en=0;
  29   1      }
  30          
  31          void lcd_data(unsigned char dat)
  32          {
  33   1        busy();
  34   1        lcd_port=dat;
  35   1        rs=1;
  36   1        rw=0;
  37   1        en=1;
  38   1        en=0;
  39   1      }
  40          
  41          void lcd_string(unsigned char *string)
  42          {
  43   1        while(*string)
  44   1          lcd_data(*string++);
  45   1      }
  46          
  47          void lcd_init(void)
  48          {
  49   1        lcd_cmd(0x02);
  50   1      lcd_cmd(0x38);
  51   1      lcd_cmd(0x01);
  52   1      lcd_cmd(0x0c);
  53   1      lcd_cmd(0x06);
  54   1      lcd_cmd(0x80);
C51 COMPILER V9.60.0.0   VOLTMETER                                                         07/13/2021 21:01:57 PAGE 2   

  55   1      }
  56          
  57          void hex2lcd(unsigned char hex)
  58          {
  59   1        char temp1,temp2;
  60   1        temp1 = hex;
  61   1        temp2=0;
  62   1        do{
  63   2          temp1 = temp1-100;
  64   2          if(temp1>=0)
  65   2            temp2++;
  66   2        } while(temp1>=0);
  67   1        if(temp2>0)
  68   1        lcd_data(temp2+0x30);
  69   1        temp2=0;
  70   1        temp1 = temp1+100;
  71   1        do{
  72   2          temp1 = temp1-10;
  73   2          if(temp1>=0)
  74   2            temp2++;
  75   2        } while(temp1>=0);
  76   1        lcd_data(temp2+0x30);
  77   1        temp2 = temp1+10;
  78   1        lcd_data(temp2+0x30);
  79   1      }
  80          
  81          #define adc_port P1              //ADC Port
  82          
  83          sbit rd=P3^7;                  //Read signal P3.7
  84          sbit wr=P3^6;                 //Write signal P3.6
  85          sbit cs=P3^5;                  //Chip Select P3.5
  86          sbit intr=P3^4;                //INTR signal P3.4
  87          
  88          unsigned int adc_avg,adc;
  89          
  90          void conv()
  91          {
  92   1        cs = 0;     //Make CS low
  93   1        wr = 0;     //Make WR low
  94   1        wr = 1;     //Make WR high
  95   1        cs = 1;     //Make CS high
  96   1        while(intr);  //Wait for INTR to go low
  97   1      }
  98          
  99          void read()
 100          {
 101   1        cs = 0;     //Make CS low
 102   1        rd = 0;     //Make RD low
 103   1        adc = adc_port; //Read ADC port
 104   1        rd = 1;     //Make RD high
 105   1        cs = 1;     //Make CS high
 106   1      }
 107          
 108          void main()
 109          {
 110   1        char i;
 111   1        lcd_init();
 112   1        lcd_string("Voltmeter Prj");
 113   1        while(1)
 114   1          {       //Forever loop
 115   2          adc_avg = 0;
 116   2          for(i=0;i<10;i++)
C51 COMPILER V9.60.0.0   VOLTMETER                                                         07/13/2021 21:01:57 PAGE 3   

 117   2          {
 118   3            conv();                  //Start conversion
 119   3            read();                  //Read ADC
 120   3            adc_avg += adc;
 121   3          }
 122   2          adc_avg = adc_avg/10;
 123   2          lcd_cmd(0xc0);
 124   2          lcd_string("DC: ");
 125   2          adc = adc_avg * 59;
 126   2      
 127   2          hex2lcd((unsigned char)(adc/1000));
 128   2          lcd_data('.');
 129   2          adc = adc%1000;
 130   2          hex2lcd((unsigned char)(adc/10));
 131   2      
 132   2          lcd_data('V');
 133   2        }
 134   1      }
 135          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    391    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
